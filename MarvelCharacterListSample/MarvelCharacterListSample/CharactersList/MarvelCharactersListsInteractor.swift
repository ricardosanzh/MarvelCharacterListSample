//
//  MarvelCharactersListsInteractor.swift
//  MarvelCharacterListSample
//
//  Created by r.a.sanz.hinojosas on 03/09/2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the VIP Swift Xcode Templates(https://github.com/Andrei-Popilian/VIP_Design_Xcode_Template)
//  so you can apply clean architecture to your iOS and MacOS projects,
//  see more http://clean-swift.com
//

import Foundation

typealias MarvelCharactersListsInteractable = MarvelCharactersListsBusinessLogic & MarvelCharactersListsDataStore

protocol MarvelCharactersListsBusinessLogic {
  func doRequest(_ request: MarvelCharactersListsModel.Request)
}

protocol MarvelCharactersListsDataStore {
  var dataSource: MarvelCharactersListsModel.DataSource { get }
}

final class MarvelCharactersListsInteractor: MarvelCharactersListsDataStore {
  
  var dataSource: MarvelCharactersListsModel.DataSource
  
  private var factory: MarvelCharactersListsInteractorFactorable.InteractableFactory
  private var presenter: MarvelCharactersListsPresentationLogic
  
  init(factory: MarvelCharactersListsInteractorFactorable.InteractableFactory, viewController: MarvelCharactersListsDisplayLogic?, dataSource: MarvelCharactersListsModel.DataSource) {
    self.factory = factory
    self.dataSource = dataSource
    self.presenter = factory.makePresenter(viewController: viewController)
  }
}


// MARK: - MarvelCharactersListsBusinessLogic
extension MarvelCharactersListsInteractor: MarvelCharactersListsBusinessLogic {
  
  func doRequest(_ request: MarvelCharactersListsModel.Request) {
    DispatchQueue.global(qos: .userInitiated).async {

      switch request {

      case .doSomething(let item):
        self.doSomething(item)
      }
    }
  }
    
}


// MARK: - Private Zone
private extension MarvelCharactersListsInteractor {
  
  func doSomething(_ item: Int) {
    
    //construct the Service right before using it
    //let serviceX = factory.makeXService()
    
    // get new data async or sync
    //let newData = serviceX.getNewData()
    
    presenter.presentResponse(.doSomething(newItem: item + 1, isItem: true))
  }
}
